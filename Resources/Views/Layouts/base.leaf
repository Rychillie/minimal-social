<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Minimal social</title>
    <meta name="description" content="A simple, distraction free platform for professionals">
    <link rel="stylesheet" type="text/css" href="/css/styles.css">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
<body>
    <main>
        #import("nav")
        <div class="container">
            #import("content")
        </div>
        #import("aside")
    </main>

    #extend("Components/Dialogs/auth")

    <script>
        const tabs = document.querySelectorAll('[data-tab-target]')
        const tabContents = document.querySelectorAll('[data-tab-content]')
        
        const dialogAuth = document.querySelector("dialog.auth");
        const showButton = document.querySelector("button.mono");
        const useMagicLink = document.querySelector("button.signin-magic-link");
        const steps = document.querySelector("dialog.auth .steps");
        const emailBack = document.querySelector("dialog.auth .steps .email button.back");
        const emailNext = document.querySelector("dialog.auth .steps .email button.next");
        const checkBack = document.querySelector("dialog.auth .steps .check button.back");
        const checkNext = document.querySelector("dialog.auth .steps .check button.next");
        
        steps.style.transition = 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)';

        showButton.addEventListener("click", () => {
            steps.style.transition = 'none';
            steps.style.transform = 'translateX(0%) translateZ(0px)';
            
            void steps.offsetWidth;
            
            steps.style.transition = 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)';
            dialogAuth.showModal();
        });

        useMagicLink.addEventListener("click", (e) => {
            e.preventDefault();
            steps.style.transform = 'translateX(-33.33%) translateZ(0px)';
        });

        emailBack.addEventListener("click", (e) => {
            e.preventDefault();
            steps.style.transform = 'translateX(0%) translateZ(0px)';
        });

        emailNext.addEventListener("click", (e) => {
            e.preventDefault();
            steps.style.transform = 'translateX(-66.66%) translateZ(0px)';
        });

        checkBack.addEventListener("click", (e) => {
            e.preventDefault();
            steps.style.transform = 'translateX(-33.33%) translateZ(0px)';
        });

        // Close the dialog when the backdrop is clicked
        dialogAuth.addEventListener('click', function(event) {
            var rect = dialogAuth.getBoundingClientRect();
            
            var isInDialog = (rect.top <= event.clientY && event.clientY <= rect.top + rect.height && rect.left <= event.clientX && event.clientX <= rect.left + rect.width);

            if (!isInDialog) {
                dialogAuth.close();
            }
        });

        // Retrieve the saved tab from local storage
        const savedTab = localStorage.getItem('activeTab');
        if (savedTab) {
            // Clear all active states before setting the saved tab
            tabContents.forEach(tabContent => {
                tabContent.classList.remove('active');
            });
            tabs.forEach(tab => {
                tab.classList.remove('active');
            });

            const target = document.querySelector(savedTab);
            if (target) {
                target.classList.add('active');
                document.querySelector(`[data-tab-target="${savedTab}"]`).classList.add('active');
            }
        }

        tabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const target = document.querySelector(tab.dataset.tabTarget);
                tabContents.forEach(tabContent => {
                    tabContent.classList.remove('active');
                });

                tabs.forEach(tab => { tab.classList.remove('active'); });
                tab.classList.add('active');
                target.classList.add('active');

                // Save the selected tab to local storage
                localStorage.setItem('activeTab', tab.dataset.tabTarget);
            });
        });
    </script>
</body>
</html>